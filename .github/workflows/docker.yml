name: DevSecOps CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  dvwa-setup-and-scan:
    runs-on: ubuntu-latest
    outputs:
      zap_exit_code: ${{ steps.capture_exit.outputs.code }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Start DVWA containers
        run: docker-compose up -d

      - name: Wait for DVWA to be ready
        run: sleep 30

      - name: Run Trivy scan on DVWA image
        uses: aquasecurity/trivy-action@0.9.1
        with:
          image-ref: ghcr.io/digininja/dvwa:latest
          format: 'table'

      - name: Prepare ZAP reports folder with correct permissions
        run: |
          mkdir -p ${{ github.workspace }}/zap-reports
          sudo chown -R 1000:1000 ${{ github.workspace }}/zap-reports

      - name: Run OWASP ZAP Baseline Scan
        id: zap_scan
        run: |
          docker run --rm --platform linux/amd64 --network host \
            -v ${{ github.workspace }}/zap-reports:/zap/wrk/:rw \
            zaproxy/zap-weekly:latest \
            zap-baseline.py -t http://127.0.0.1:4280 -r zap_report.html
        continue-on-error: true

      - name: Capture ZAP exit code
        id: capture_exit
        run: echo "code=$?" >> $GITHUB_OUTPUT

      - name: Upload ZAP report artifact
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-reports/zap_report.html

      - name: Tear down containers
        run: docker-compose down

      - name: Fail if ZAP exit code is not 0 or 2
        if: steps.capture_exit.outputs.code != '0' && steps.capture_exit.outputs.code != '2'
        run: exit ${{ steps.capture_exit.outputs.code }}

  notify-success:
    runs-on: ubuntu-latest
    needs: dvwa-setup-and-scan
    if: needs.dvwa-setup-and-scan.result == 'success' && needs.dvwa-setup-and-scan.outputs.zap_exit_code == '0'
    steps:
      - name: Send Slack Notification (Success)
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"DevSecOps pipeline for DVWA completed successfully with no vulnerabilities!"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

  notify-warning:
    runs-on: ubuntu-latest
    needs: dvwa-setup-and-scan
    if: needs.dvwa-setup-and-scan.result == 'success' && needs.dvwa-setup-and-scan.outputs.zap_exit_code == '2'
    steps:
      - name: Send Slack Notification (Warning)
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"ZAP scan found vulnerabilities in DVWA! Please review the zap_report.html artifact."}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

  notify-failure:
    runs-on: ubuntu-latest
    needs: dvwa-setup-and-scan
    if: needs.dvwa-setup-and-scan.result == 'failure'
    steps:
      - name: Send Slack Notification (Failure)
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"DevSecOps pipeline for DVWA failed!"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

